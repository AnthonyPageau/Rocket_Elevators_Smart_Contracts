{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jorge\\\\Desktop\\\\ContractWindows\\\\Rocket_Elevators_Smart_Contracts-1\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\"; //different\n\nimport \"./App.css\";\nimport ReadString from \"./ReadString\";\nimport SetString from \"./SetString\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props; // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ReadString, {\n        drizzle: this.props.drizzle,\n        drizzleState: this.state.drizzleState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SetString, {\n        drizzle: this.props.drizzle,\n        drizzleState: this.state.drizzleState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Jorge/Desktop/ContractWindows/Rocket_Elevators_Smart_Contracts-1/client/src/App.js"],"names":["React","Component","ReadString","SetString","App","state","loading","drizzleState","componentDidMount","drizzle","props","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","componentWillUnmount","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAA0C;;AAC1C,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE;AAA/B,KADkB;AAAA;;AAG1BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB,CADkB,CAGlB;;AACA,SAAKC,WAAL,GAAmBF,OAAO,CAACG,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAE/C;AACA,YAAMN,YAAY,GAAGE,OAAO,CAACG,KAAR,CAAcE,QAAd,EAArB,CAH+C,CAK/C;;AACA,UAAIP,YAAY,CAACQ,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEX,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA;AAAlB,SAAd;AACD;AACF,KATkB,CAAnB;AAUD;;AAEDW,EAAAA,oBAAoB,GAAG;AACrB,SAAKP,WAAL;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKd,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,UAAD;AACE,QAAA,OAAO,EAAE,KAAKI,KAAL,CAAWD,OADtB;AAEE,QAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWE;AAF3B;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,SAAD;AACE,QAAA,OAAO,EAAE,KAAKG,KAAL,CAAWD,OADtB;AAEE,QAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWE;AAF3B;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AArCyB;;AAuC5B,eAAeH,GAAf","sourcesContent":["import React, { Component } from \"react\"; //different\r\nimport \"./App.css\";\r\nimport ReadString from \"./ReadString\";\r\nimport SetString from \"./SetString\";\r\n\r\nclass App extends Component {\r\n  state = { loading: true, drizzleState: null };\r\n\r\n  componentDidMount() {\r\n    const { drizzle } = this.props;\r\n\r\n    // subscribe to changes in the store\r\n    this.unsubscribe = drizzle.store.subscribe(() => {\r\n\r\n      // every time the store updates, grab the state from drizzle\r\n      const drizzleState = drizzle.store.getState();\r\n\r\n      // check to see if it's ready, if so, update local component state\r\n      if (drizzleState.drizzleStatus.initialized) {\r\n        this.setState({ loading: false, drizzleState });\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unsubscribe();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) return \"Loading Drizzle...\";\r\n    return (\r\n      <div className=\"App\">\r\n        <ReadString\r\n          drizzle={this.props.drizzle}\r\n          drizzleState={this.state.drizzleState}\r\n        />\r\n        <SetString\r\n          drizzle={this.props.drizzle}\r\n          drizzleState={this.state.drizzleState}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}